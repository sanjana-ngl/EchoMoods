import express from "express";
import cors from "cors";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import dotenv from "dotenv";
dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.json());

// 1. Gemini: interpret mood prompt
app.post("/api/gemini/interpret", async (req, res) => {
  const { prompt } = req.body;
  try {
    const geminiRes = await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=" + process.env.GEMINI_API_KEY, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        contents: [{ parts: [{ text: `Interpret this mood prompt for playlist generation: ${prompt}` }] }]
      }),
    });
    const data = await geminiRes.json();
    let moodProfile;
    if (data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        moodProfile = data.candidates[0].content.parts[0].text.trim();
    } else if (data?.candidates?.[0]?.output) {
      moodProfile = data.candidates[0].output.trim();
    } else {
         moodProfile = prompt; // fallback: just use the original user prompt
    }
    res.json({ moodProfile });
  } catch (err) {
    console.error(err);
    res.status(500).send("Gemini API failed");
  }
});

// 2. Spotify: get access token
async function getSpotifyToken() {
  const auth = Buffer.from(`${process.env.SPOTIFY_CLIENT_ID}:${process.env.SPOTIFY_CLIENT_SECRET}`).toString("base64");
  const res = await fetch("https://accounts.spotify.com/api/token", {
    method: "POST",
    headers: { Authorization: `Basic ${auth}`, "Content-Type": "application/x-www-form-urlencoded" },
    body: "grant_type=client_credentials",
  });
  const data = await res.json();
  return data.access_token;
}

// 3. Spotify: generate playlist (recommendations)
app.post("/api/spotify/generate-playlists", async (req, res) => {
  const { moodProfile } = req.body;
  try {
    const token = await getSpotifyToken();

    const keyword = moodProfile.split(",")[0] || moodProfile;

const searchRes = await fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(keyword)}&type=playlist&limit=1`, {
  headers: { Authorization: `Bearer ${token}` },
});

const searchData = await searchRes.json();

// Instead of raw tracks, fetch that playlistâ€™s tracks
let tracks = [];
if (searchData.playlists?.items?.length > 0) {
  const playlistId = searchData.playlists.items[0].id;
  const playlistRes = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  const playlistData = await playlistRes.json();
  tracks = playlistData.items.map((item) => {
    const t = item.track;
    return {
      id: t.id,
      name: t.name,
      artists: t.artists.map((a) => a.name),
      album: t.album.name,
      albumArt: t.album.images[0]?.url,
      preview_url: t.preview_url,
      external_url: t.external_urls.spotify,
    };
  });
}

    res.json([
      {
        name: `Playlist for: ${moodProfile}`,
        description: "Generated by Gemini + Spotify",
        tracks,
      },
    ]);
  } catch (err) {
    console.error(err);
    res.status(500).send("Spotify API failed");
  }
});

// Start server
app.listen(PORT, () => console.log(`Backend running on http://localhost:${PORT}`));
